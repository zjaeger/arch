CURL

jen pro informaci - k èemu je ten CURL (http://curl.haxx.se/):

1. tohle je "example" od autorù - odeslání jednoduchého POST request ....

#include <stdio.h>
#include <curl/curl.h>

int main(void)
{
  CURL *curl;  /* handle */
  CURLcode res;  /* curl return code */

  char *postthis="moo mooo moo moo";

  curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, "http://posthere.com");
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postthis);

    /* if we don't provide POSTFIELDSIZE, libcurl will strlen() by
       itself */
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(postthis));

    res = curl_easy_perform(curl);

    /* always cleanup */
    curl_easy_cleanup(curl);
  }
  return 0;
}

... princip je zøejmej: inicializace (curl_easy_init()), nastavení všeho (curl_easy_setopt()) a vykonání akce (curl_easy_perform()).


2. souèástí je i cmd-line utilita, se kterou se jde "bavit" s http-serverem:

$ curl -d @iap1.xml http://unixts.rdm.cz:8081/cgi-bin/iapcgi

... odešle soubor "iap1.xml" jako obsah "of POST-request". Výstup zobrazí na "stdout".


3. s tímhle jsem vèera experimentoval ...

/* call-back function for CURL : output capture */

size_t write_dta( void *buf, size_t sz, size_t count, void *point )
  {
   struct dbuf_s  *dbuf = (struct dbuf_s *) point ;
   int    len ;

   len = sz * count ;
   if( len > 0
       && dbuf_append_substr( dbuf, (char*) buf, len ) == OK )
     {
      return( len ) ;
     }

   return( 0 ) ;
  }

#define MY_URL     "http://unixts.rdm.cz:8081/fcgi-bin/iapfcgi"

int hint( struct ap_s *ap, struct dbuf_s *dbuf_xml, struct dbuf_s *dbuf )
  {
   CURL               *curl ;
   CURLcode            curl_rc ;
   struct curl_slist  *headers ;
   int                 rc = OK ;
   long                http_rc ;
   char                errm[ CURL_ERROR_SIZE ] ;

   curl_global_init( CURL_GLOBAL_ALL ) ;
   if( (curl = curl_easy_init()) != NULL )
     {
      headers = NULL ;
      *((int*) errm) = 0 ;
      curl_easy_setopt( curl, CURLOPT_URL, MY_URL ) ;

      if( dbuf_xml->len > 0 ) /* buffer with post-content */
        {
         headers = curl_slist_append( headers,"Content-Type: text/xml") ;
         curl_easy_setopt( curl, CURLOPT_POSTFIELDS,    dbuf_xml->val ) ;
         curl_easy_setopt( curl, CURLOPT_POSTFIELDSIZE, dbuf_xml->len ) ;
         curl_easy_setopt( curl, CURLOPT_HTTPHEADER, headers ) ;
        }

      curl_easy_setopt( curl, CURLOPT_WRITEFUNCTION, write_dta ) ;
      curl_easy_setopt( curl, CURLOPT_WRITEDATA, (void*) dbuf ) ;

      curl_easy_setopt( curl, CURLOPT_HEADERFUNCTION, write_dta ) ;
      curl_easy_setopt( curl, CURLOPT_WRITEHEADER, (void*) dbuf ) ;

      curl_easy_setopt( curl, CURLOPT_ERRORBUFFER, errm ) ;
      if( ap->log != (FILE*) 0 )
        {
         curl_easy_setopt( curl, CURLOPT_VERBOSE, TRUE ) ;
         curl_easy_setopt( curl, CURLOPT_STDERR, ap->log ) ;
        }

      curl_rc = curl_easy_perform( curl ) ;
      ap_errf( ap, M_INF,"curl_rc=%d errm=\'%s\'", curl_rc, errm ) ;
      if( curl_rc == 0 )
        {
         curl_rc = curl_easy_getinfo( curl, CURLINFO_RESPONSE_CODE, &http_rc ) ;
         ap_errf( ap, M_INF,"curl_rc=%d errm=\'%s\' http_rc=%ld", curl_rc, errm, http_rc ) ;
        }

      curl_slist_free_all( headers ) ;
      curl_easy_cleanup( curl ) ;
     }
   curl_global_cleanup() ;
   return( rc ) ;
  }

4. Zatímní závìr

není to k dispozici jen pro jazyk C, ale pro "kdeco". A je to jedna z více variant (takových knihoven je zjevnì víc). Díval jsem se tøeba do Pythonu a tam je podpora HTTP a FTP (atd.) taky. Pokud bych mìl nìkde øešit komunikaci mezi rùznými servery, asi bych to dìlal na bázi HTTP.
